from urllib.parse import urlencode
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException, status, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import json
import os
import time
import requests
from dotenv import load_dotenv
import sys
from pathlib import Path
import base64

# P≈ôid√°n√≠ src/lib do PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent / "lib"))

# Naƒçten√≠ OAuth konfigurace
load_dotenv()

# TickTick OAuth
TICKTICK_CLIENT_ID = os.getenv("TICKTICK_CLIENT_ID")
TICKTICK_CLIENT_SECRET = os.getenv("TICKTICK_CLIENT_SECRET")
TICKTICK_CALLBACK_URL = os.getenv("TICKTICK_CALLBACK_URL")
TICKTICK_TOKEN_PATH = str(Path(__file__).parent / "lib" / "tokens" / "ticktick_tokens.json")

# Notion OAuth (public MCP client)
NOTION_CLIENT_ID = "YvWLaE2nKO861jM1"  # Ve≈ôejn√Ω Notion MCP client
NOTION_CALLBACK_URL = "http://localhost:8080/callback"  # MCP m√° registrovan√Ω jen localhost
NOTION_TOKEN_PATH = str(Path(__file__).parent / "lib" / "tokens" / "notion_tokens.json")

from agent_core import get_agent_service, run_agent_query
from auth import (
    verify_api_key,
    is_auth_configured,
    LoginRequest,
    LoginResponse,
    verify_user_credentials,
    generate_api_key,
    add_api_key,
    get_user_count
)

app = FastAPI(title="MCP Agent API")

# CORS pro Next.js (bƒõ≈æ√≠ defaultnƒõ na localhost:3000)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:5174", "https://agent.vojtechfal.cz", "https://ai.vojtechfal.cz"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ChatMessage(BaseModel):
    message: str
    session_id: str = "default"

# TickTick OAuth 2.0 - zah√°jen√≠ autentizace
@app.get("/api/ticktick/auth")
async def ticktick_auth(state: str = "default"):
    """
    P≈ôesmƒõruje u≈æivatele na TickTick OAuth 2.0 autorizaƒçn√≠ str√°nku
    """
    if not TICKTICK_CLIENT_ID or not TICKTICK_CALLBACK_URL:
        raise HTTPException(status_code=500, detail="TickTick OAuth nen√≠ nakonfigurov√°n")
    params = {
        "scope": "tasks:read tasks:write",
        "client_id": TICKTICK_CLIENT_ID,
        "state": state,
        "redirect_uri": TICKTICK_CALLBACK_URL,
        "response_type": "code"
    }
    oauth_url = f"https://ticktick.com/oauth/authorize?{urlencode(params)}"
    return {"auth_url": oauth_url}

# TickTick OAuth 2.0 - callback
@app.get("/api/ticktick/callback")
async def ticktick_callback(request: Request):
    code = request.query_params.get("code")
    if not code:
        raise HTTPException(status_code=400, detail="Chyb√≠ autorizaƒçn√≠ k√≥d")
    
    # Log the received code for debugging
    print(f"üîë Received authorization code: {code}")
    print(f"üìç Client ID: {TICKTICK_CLIENT_ID}")
    print(f"üîó Redirect URI: {TICKTICK_CALLBACK_URL}")
    
    token_url = "https://ticktick.com/oauth/token"
    scope = "tasks:read tasks:write"
    data = {
        "code": code,
        "grant_type": "authorization_code",
        "scope": scope,
        "redirect_uri": TICKTICK_CALLBACK_URL
    }
    
    # Basic Auth header
    basic_auth = base64.b64encode(f"{TICKTICK_CLIENT_ID}:{TICKTICK_CLIENT_SECRET}".encode()).decode()
    headers = {
        "Authorization": f"Basic {basic_auth}",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    
    print(f"üì§ Sending token request to {token_url}")
    print(f"üì¶ Data: {data}")
    
    try:
        resp = requests.post(token_url, data=data, headers=headers)
        
        print(f"üì• Response status: {resp.status_code}")
        print(f"üìÑ Response headers: {dict(resp.headers)}")
        print(f"üìù Response body: {resp.text[:1000]}")
        
        if resp.status_code != 200:
            return {
                "error": "Token exchange failed",
                "detail": f"Chyba p≈ôi z√≠sk√°v√°n√≠ tokenu: {resp.text}",
                "status_code": resp.status_code,
                "response": resp.text,
                "request_data": data,
                "token_url": token_url
            }
        
        tokens = resp.json()
        print(f"‚úÖ Tokens received: {list(tokens.keys())}")
        
        tokens["obtained_at"] = int(time.time())
        # P≈ôidej client_id a client_secret pro refresh token
        tokens["client_id"] = TICKTICK_CLIENT_ID
        tokens["client_secret"] = TICKTICK_CLIENT_SECRET
        
        Path(TICKTICK_TOKEN_PATH).parent.mkdir(parents=True, exist_ok=True)
        with open(TICKTICK_TOKEN_PATH, "w", encoding="utf-8") as f:
            json.dump(tokens, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ Tokens saved to {TICKTICK_TOKEN_PATH}")
        
        return {
            "success": True,
            "detail": "Tokeny √∫spƒõ≈°nƒõ z√≠sk√°ny a ulo≈æeny.", 
            "token_keys": list(tokens.keys()),
            "saved_to": TICKTICK_TOKEN_PATH
        }
    except Exception as e:
        print(f"‚ùå Exception occurred: {e}")
        import traceback
        traceback.print_exc()
        return {
            "error": "Exception during token exchange",
            "detail": str(e),
            "traceback": traceback.format_exc()
        }

# Notion OAuth - upload token≈Ø (pro deployment z lok√°lu na VPS)
@app.post("/api/notion/upload-tokens")
async def upload_notion_tokens(
    access_token: str,
    refresh_token: str,
    api_key: str = Depends(verify_api_key)
):
    """
    Nahraje Notion tokeny p≈ô√≠mo (pro pou≈æit√≠ kdy≈æ OAuth callback nefunguje na VPS).
    Vy≈æaduje API kl√≠ƒç pro autentizaci.
    
    Pou≈æit√≠:
        curl -X POST https://xxx.xxx/api/notion/upload-tokens \
             -H "X-API-Key: your-api-key" \
             -H "Content-Type: application/json" \
             -d '{"access_token": "...", "refresh_token": "..."}'
    """
    current_time = int(time.time())
    expires_in = 3600  # Notion tokeny obvykle plat√≠ 1 hodinu
    
    tokens = {
        "access_token": access_token,
        "refresh_token": refresh_token,
        "token_type": "bearer",
        "expires_in": expires_in,
        "expires_at": current_time + expires_in,
        "obtained_at": current_time,
        "scope": ""
    }
    
    Path(NOTION_TOKEN_PATH).parent.mkdir(parents=True, exist_ok=True)
    with open(NOTION_TOKEN_PATH, "w", encoding="utf-8") as f:
        json.dump(tokens, f, ensure_ascii=False, indent=2)
    
    return {"detail": "Notion tokeny √∫spƒõ≈°nƒõ nahr√°ny a ulo≈æeny."}


# Endpoint pro p≈ôihl√°≈°en√≠ - VE≈òEJN√ù
@app.post("/api/auth/login", response_model=LoginResponse)
async def login(request: LoginRequest):
    """
    Endpoint pro p≈ôihl√°≈°en√≠ u≈æivatele.
    Ovƒõ≈ô√≠ u≈æivatelsk√© jm√©no a heslo a vr√°t√≠ API kl√≠ƒç.
    
    Args:
        request: LoginRequest s username a password
        
    Returns:
        LoginResponse s api_key a message
        
    Raises:
        HTTPException: 401 pokud jsou p≈ôihla≈°ovac√≠ √∫daje neplatn√©
        HTTPException: 503 pokud nejsou nakonfigurov√°ni ≈æ√°dn√≠ u≈æivatel√©
    """
    # Zkontrolovat, zda jsou nakonfigurov√°ni u≈æivatel√©
    if get_user_count() == 0:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Nejsou nakonfigurov√°ni ≈æ√°dn√≠ u≈æivatel√©. Nastavte USERNAME a PASSWORD v .env souboru."
        )
    
    # Ovƒõ≈ôit p≈ôihla≈°ovac√≠ √∫daje
    if not verify_user_credentials(request.username, request.password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Neplatn√© u≈æivatelsk√© jm√©no nebo heslo",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # Vygenerovat nov√Ω API kl√≠ƒç
    new_api_key = generate_api_key()
    
    # P≈ôidat kl√≠ƒç do sady platn√Ωch kl√≠ƒç≈Ø
    add_api_key(new_api_key)
    
    return LoginResponse(
        api_key=new_api_key,
        message=f"P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©. Pou≈æijte tento API kl√≠ƒç v hlaviƒçce X-API-Key pro p≈ô√≠stup k chr√°nƒõn√Ωm endpoint≈Øm."
    )


# REST endpoint (jednodu≈°≈°√≠ varianta) - CHR√ÅNƒöN√ù
@app.post("/api/chat")
async def chat(request: ChatMessage, api_key: str = Depends(verify_api_key)):
    result = await run_agent_query(request.message, request.session_id)
    return {"response": result, "session_id": request.session_id}

# WebSocket endpoint (pro streaming) - CHR√ÅNƒöN√ù
@app.websocket("/ws/chat")
async def websocket_chat(websocket: WebSocket):
    await websocket.accept()
    
    # Ovƒõ≈ôit API kl√≠ƒç z WebSocket p≈ôipojen√≠
    try:
        # Z√≠skat API kl√≠ƒç z parametr≈Ø dotazu nebo hlaviƒçek
        api_key = websocket.query_params.get("api_key") or websocket.headers.get("x-api-key")
        
        if not is_auth_configured():
            await websocket.send_json({
                "type": "error",
                "message": "Chyba konfigurace serveru: ≈Ω√°dn√© API kl√≠ƒçe nejsou nakonfigurov√°ny"
            })
            await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
            return
        
        if not api_key:
            await websocket.send_json({
                "type": "error",
                "message": "Vy≈æadov√°na autentizace: Chyb√≠ API kl√≠ƒç. Poskytnƒõte p≈ôes 'api_key' parametr dotazu nebo 'X-API-Key' hlaviƒçku"
            })
            await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
            return
        
        # Ovƒõ≈ôit API kl√≠ƒç
        await verify_api_key(api_key)
        
    except HTTPException as e:
        await websocket.send_json({
            "type": "error",
            "message": f"Autentizace selhala: {e.detail}"
        })
        await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
        return
    except Exception as e:
        await websocket.send_json({
            "type": "error",
            "message": f"Chyba autentizace: {str(e)}"
        })
        await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
        return
    
    agent_service = get_agent_service()
    
    try:
        while True:
            # P≈ôijmout zpr√°vu od klienta
            data = await websocket.receive_text()
            message_data = json.loads(data)
            user_message = message_data.get("message", "")
            
            # Poslat potvrzen√≠
            await websocket.send_json({
                "type": "status",
                "message": "Processing..."
            })
            
            # Spustit agenta
            try:
                result = await agent_service.run_query(user_message)
                
                # Poslat v√Ωsledek
                await websocket.send_json({
                    "type": "response",
                    "message": result,
                    "done": True
                })
            except Exception as e:
                await websocket.send_json({
                    "type": "error",
                    "message": str(e)
                })
                
    except WebSocketDisconnect:
        print("Client disconnected")
    except Exception as e:
        print(f"Error: {e}")
        await websocket.close()

# Server-Sent Events varianta (alternativa k WebSocket) - PROTECTED
@app.get("/api/chat/stream")
async def chat_stream(message: str, api_key: str = Depends(verify_api_key)):
    from fastapi.responses import StreamingResponse
    
    async def event_generator():
        agent_service = get_agent_service()
        
        # Odeslat status
        yield f"data: {json.dumps({'type': 'status', 'message': 'Processing...'})}\n\n"
        
        try:
            # Spustit agenta
            result = await agent_service.run_query(message)
            
            # Odeslat v√Ωsledek
            yield f"data: {json.dumps({'type': 'response', 'message': result, 'done': True})}\n\n"
        except Exception as e:
            yield f"data: {json.dumps({'type': 'error', 'message': str(e)})}\n\n"
    
    return StreamingResponse(
        event_generator(),
        media_type="text/event-stream",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
        }
    )

@app.get("/")
async def root():
    return {
        "message": "MCP Agent API bƒõ≈æ√≠",
        "version": "1.0.0",
        "authentication": "API kl√≠ƒç vy≈æadov√°n pro chr√°nƒõn√© endpointy"
    }

@app.get("/health")
async def health():
    auth_status = "nakonfigurov√°no" if is_auth_configured() else "nen√≠_nakonfigurov√°no"
    return {
        "status": "healthy",
        "authentication": auth_status
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
